on: [push, pull_request]

name: Test & Build

jobs:

  checks:
    name: Checks
    runs-on: ubuntu-latest
    container: fedorapython/fedora-python-tox:latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          dnf install -y pre-commit git krb5-devel libgit2-devel

      - name: Mark the working directory as safe for Git
        run: git config --global --add safe.directory $PWD

      - name: Install the project
        run: pip3 install -e .[dev]

      - name: Run pre-commit checks
        run: pre-commit run --all-files


  docs:
    name: Documentation
    runs-on: ubuntu-latest
    container: fedorapython/fedora-python-tox:latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: dnf install -y krb5-devel libgit2-devel

      - name: Build the docs
        run: tox -e docs

      # - name: Save the docs
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: docs
      #     path: fedora_messaging_git_hook/docs/_build/html


  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    container: quay.io/${{ matrix.distro }}
    steps:
      - uses: actions/checkout@v4

      - name: prepare centos 8
        if: ${{ endsWith(matrix.distro, 'centos:stream8') }}
        run: |
          dnf install -y "dnf-command(config-manager)"
          dnf config-manager --set-enabled powertools
          dnf install -y epel-release epel-next-release

      - name: prepare centos 9
        if: ${{ endsWith(matrix.distro, 'centos:stream9') }}
        run: |
          dnf install -y "dnf-command(config-manager)"
          dnf config-manager --set-enabled crb
          dnf install -y epel-release epel-next-release

      - name: Install dependencies
        run: |
          dnf install -y python3 python3-pip tox git krb5-devel libgit2-devel python3-pygit2

      - name: Run the tests
        run: tox --sitepackages -e py-unit

      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v1
      #   with:
      #     name: ${{ matrix.pyver }}
      #     flags: unittests
      #     env_vars: PYTHON
      #     fail_ci_if_error: true

    strategy:
      fail-fast: false
      matrix:
        distro:
          - fedora/fedora:37
          - fedora/fedora:38
          - fedora/fedora:39
          - centos/centos:stream8
          - centos/centos:stream9


  # https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
  build:
    name: Build distribution ðŸ“¦
    runs-on: ubuntu-latest
    needs:
      - checks
      - docs
      - unit-tests
    outputs:
      release-notes: ${{ steps.extract-changelog.outputs.markdown }}

    steps:

      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install pypa/build
        run: python3 -m pip install build --user

      - name: Build a binary wheel and a source tarball
        run: python3 -m build

      - name: Store the distribution packages
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: dist/

      - name: Extract changelog section
        id: extract-changelog
        uses: sean0x42/markdown-extract@v2
        with:
          file: docs/release_notes.md
          pattern: 'Version\s+\[[[:word:].-]+\]\(.*\)'
          no-print-matched-heading: true
      - name: Show the changelog
        env:
          CHANGELOG: ${{ steps.extract-changelog.outputs.markdown }}
        run: echo "$CHANGELOG"


  publish-to-pypi:
    name: Publish to PyPI ðŸš€
    # only publish to PyPI on final tag pushes
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'rc')
    needs:
      - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/fedora-messaging-git-hook
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1


  github-release:
    name: Create a GitHub Release ðŸ“¢
    needs:
      - publish-to-pypi
    runs-on: ubuntu-latest
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/

      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v2.1.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          fail_on_unmatched_files: true
          body: ${{ needs.build.outputs.release-notes }}
